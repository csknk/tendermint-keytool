package main

import (
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/tendermint/tendermint/crypto/ed25519"
)

type Key struct {
	Type  string `json:"type"`
	Value string `json:"value"`
}

func main() {
	key := ed25519.GenPrivKey()
	pubKey := key.PubKey()
	privKey := Key{
		Type:  "tendermint/PubKeyEd25519",
		Value: base64.StdEncoding.EncodeToString(key),
	}
	address := hex.EncodeToString(pubKey.Address())
	address = strings.ToUpper(address)
	//	add := pubKey.Address()
	//	fmt.Printf("Private key: %v\n", hex.EncodeToString(privKey))
	//	fmt.Printf("Private key: %v\n", base64.StdEncoding.EncodeToString(privKey))
	//	fmt.Printf("Public key: %v\n", hex.EncodeToString(pubKey.Bytes()))
	//	fmt.Printf("Public key: %v\n", base64.StdEncoding.EncodeToString(pubKey.Bytes()))
	//	fmt.Printf("Address: %v\n", add)
	kp := KeyPair{
		Address: address,
		PrivKey: privKey,
		PubKey: Key{
			Type:  "tendermint/PubKeyEd25519",
			Value: base64.StdEncoding.EncodeToString(pubKey.Bytes()),
		},
	}

	out, err := json.MarshalIndent(&kp, "", "  ")
	if err != nil {
		log.Println(err)
		os.Exit(1)
	}

	fmt.Println(string(out))
}
